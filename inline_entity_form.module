<?php

/**
 * @file
 * Provides a widget for inline management (creation, modification, removal) of
 * referenced entities. The primary use case is the parent -> children one
 * (for example, order -> line items), where the child entities are never
 * managed outside the parent form.
 */

/**
 * Implements hook_inline_entity_type_info().
 */
function inline_entity_form_inline_entity_type_info() {
  $types = array();
  $types['commerce_product'] = array(
    'file' => drupal_get_path('module', 'inline_entity_form') . '/includes/commerce_product.type.inc',
    'callbacks' => array(
      'table' => 'inline_entity_form_commerce_product_build_table',
      'form' => 'inline_entity_form_commerce_product_form',
      'delete form' => 'inline_entity_form_commerce_product_delete_form',
    ),
    'labels' => array(
      'add fieldset' => t('Add new product variation'),
      'add button' => t('Add variation'),
      'save button' => t('Save variation'),
    ),
    'empty text' => t('No product variations have been created. At least one variation is required.'),
  );

  return $types;
}

/**
 * Return an array of all defined inline entity types.
 *
 * @return
 *   The array of types, keyed by entity type.
 */
function inline_entity_form_types() {
  $types = &drupal_static(__FUNCTION__);

  if (!isset($types)) {
    $types = array();
    foreach (module_implements('inline_entity_type_info') as $module) {
      foreach (module_invoke($module, 'inline_entity_type_info') as $entity_type => $info) {
        $info += array(
          // Remember the providing module.
          'module' => $module,
          // Provide defaults.
          'callbacks' => array(),
          'labels' => array(),
          'empty text' => '',
        );
        $types[$entity_type] = $info;
      }
    }

    drupal_alter('inline_entity_type_info', $types);
  }

  return $types;
}

/**
 * Loads the data for a specific inline entity type.
 *
 * @param $entity_type
 *   Entity type.
 *
 * @return
 *   The requested array or FALSE if the entity type is not supported.
 */
function inline_entity_form_type($entity_type) {
  $types = inline_entity_form_types();

  // The passed-in entity type is not supported for inline management.
  if (empty($types[$entity_type])) {
    return FALSE;
  }

  return $types[$entity_type];
}

/**
 * Implements hook_theme().
 */
function inline_entity_form_theme() {
  return array(
    'inline_entity_form_entity_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function inline_entity_form_field_widget_info() {
  $widgets = array();

  $widgets['inline_entity_form'] = array(
    'label' => t('Inline entity form'),
    'field types' => array('commerce_product_reference', 'entityreference'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Introspects field and instance settings, and determines the correct settings
 * for the functioning of the widget.
 *
 * Settings:
 *   - entity_type - The entity_type being managed.
 *   - bundles - Bundles of entities that the user is allowed to create.
 *   - column - The name of the ref. field column that stores the entity id.
 */
function inline_entity_form_settings($field, $instance) {
  $settings = array(
    'entity_type' => NULL,
    'bundles' => array(),
    'column' => NULL,
  );

  if ($field['type'] == 'commerce_product_reference') {
    $settings['entity_type'] = 'commerce_product';
    $settings['column'] = 'product_id';

    // The product reference field has its bundle setting, use it.
    $types = array_filter($instance['settings']['referenceable_types']);
    if (!empty($types)) {
      $settings['bundles'] = array_values($types);
    }
  }
  elseif ($field['type'] == 'entityreference') {
    $settings['entity_type'] = $field['settings']['target_type'];
    $settings['column'] = 'target_id';

    if (!empty($field['settings']['handler_settings']['target_bundles'])) {
      $bundles = array_filter($field['settings']['handler_settings']['target_bundles']);
      if (!empty($bundles)) {
        $settings['bundles'] = array_values($bundles);
      }
    }
  }

  // By default, allow entities of all bundles to be created.
  if (empty($settings['bundles'])) {
    $info = entity_get_info($settings['entity_type']);
    foreach ($info['bundles'] as $bundle_name => $bundle_info) {
      $settings['bundles'][] = $bundle_name;
    }
  }

  return $settings;
}

/**
 * Implements hook_field_widget_form().
 */
function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  static $parents_delta = array();

  $widget = $instance['widget'];
  $settings = inline_entity_form_settings($field, $instance);
  $type_info = inline_entity_form_type($settings['entity_type']);
  // The current entity type is not supported, execution can't continue.
  if (!$type_info) {
    return $element;
  }
  // The callbacks are in another file, include it.
  if (!empty($type_info['file'])) {
    include_once($type_info['file']);
  }

  if ($widget['type'] == 'inline_entity_form') {
    // Build a parents array for this element's values in the form.
    $parents = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));
    $parents_key = strtr(implode('-', $parents), '_', '-');

    if (!isset($parents_delta[$parents_key])) {
      $parents_delta[$parents_key] = count($parents_delta);
    }

    // Determine the wrapper ID for the entire element.
    $wrapper = 'inline-entity-form-' . $parents_key;
    $element = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#element_validate' => array('inline_entity_form_element_validate'),
      '#description' => NULL,
      '#prefix' => '<div id="' . $wrapper . '">',
      '#suffix' => '</div>',
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'inline_entity_form') . '/theme/inline_entity_form.css',
        ),
      ),
    ) + $element;

    // Load the entities from the $items array and store them in the form state
    // for further manipulation if this is the first time the widget form is
    // being built.
    if (empty($form_state['inline_entity_form'][$parents_key])) {
      // Initialize the last action to NULL.
      $form_state['inline_entity_form'][$parents_key]['action'] = NULL;

      // Initialize the add form to NULL.
      $form_state['inline_entity_form'][$parents_key]['add_form'] = NULL;

      // Add the element's settings to the array.
      $form_state['inline_entity_form'][$parents_key]['settings'] = $settings;

      // Extract the entity IDs from the items array and load the entities.
      $form_state['inline_entity_form'][$parents_key]['entities'] = array();
      $entity_ids = array();
      foreach ($items as $item) {
        $entity_ids[] = $item[$settings['column']];
      }

      $delta = 0;
      foreach (entity_load($settings['entity_type'], $entity_ids) as $entity) {
        $form_state['inline_entity_form'][$parents_key]['entities'][$delta] = array(
          'data' => $entity,
          'weight' => $delta,
          'form' => NULL,
          'needs_save' => FALSE,
        );

        $delta++;
      }

      // If no entities were found, open the add form.
      if (empty($form_state['inline_entity_form'][$parents_key]['entities'])) {
        $element['#description'] = $type_info['empty text'];

        if (count($settings['bundles']) == 1) {
          $form_state['inline_entity_form'][$parents_key]['add_form'] = array(
            'bundle' => reset($settings['bundles']),
          );
          $form_state['inline_entity_form'][$parents_key]['action'] = 'ief_add';
        }
      }
    }

    $element['entities'] = array('#tree' => TRUE, '#theme' => 'inline_entity_form_entity_table');
    // Get all entities from form_state (some of which might not yet exist in
    // the database), and pass them to the table building callback.
    $entities = array();
    foreach ($form_state['inline_entity_form'][$parents_key]['entities'] as $key => $value) {
      $entities[] = $value['data'];
    }
    $entity_table = $type_info['callbacks']['table']($entities);
    $element['entities']['#table_header'] = $entity_table['#header'];

    foreach ($form_state['inline_entity_form'][$parents_key]['entities'] as $key => $value) {
      $entity = $value['data'];

      // Handle row weights.
      $element['entities'][$key]['#weight'] = $value['weight'];
      $element['entities'][$key]['delta'] = array(
        '#type' => 'weight',
        '#delta' => 50,
        '#default_value' => $value['weight'],
        '#attributes' => array('class' => array('inline-entity-form-entity-delta')),
      );

      // First check to see if this entity should be displayed as a form.
      if (!empty($value['form'])) {
        $element['entities'][$key]['form'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('inline-entity-form-title')),
          // Used by Field API, #element_validate and #element_submit to find
          // the relevant values in $form_state.
          '#parents' => array_merge($parents, array('entities', $key, 'form')),
          // Store the entity on the form, to be modified in #element_submit.
          '#entity' => $entity,
          '#entity_type' => $settings['entity_type'],
        );
        $element['entities'][$key]['form']['actions'] = array(
          '#type' => 'container',
          '#weight' => 100,
        );
        // Prepare data for the form callbacks.
        $form = &$element['entities'][$key]['form'];

        // Add the entity edit form.
        if ($value['form'] == 'edit') {
          $form += $type_info['callbacks']['form']($form, $form_state);

          $form['actions']['ief_edit_save'] = array(
            '#type' => 'submit',
            '#value' => $type_info['labels']['save button'],
            '#name' => 'ief-' . $parents_delta[$parents_key] . '-edit-submit-' . $key,
            '#limit_validation_errors' => array($form['#parents']),
            '#submit' => array(),
            '#ajax' => array(
              'callback' => 'inline_entity_form_widget_refresh',
              'wrapper' => $wrapper,
            ),
          );
          $form['actions']['ief_edit_cancel'] = array(
            '#type' => 'submit',
            '#value' => t('Cancel'),
            '#name' => 'ief-' . $parents_delta[$parents_key] . '-edit-cancel-' . $key,
            '#limit_validation_errors' => array(),
            '#submit' => array(),
            '#ajax' => array(
              'callback' => 'inline_entity_form_widget_refresh',
              'wrapper' => $wrapper,
            ),
          );
        }
        elseif ($value['form'] == 'delete') {
          $form += $type_info['callbacks']['delete form']($form, $form_state, $entity);

          $form['actions']['ief_delete_confirm'] = array(
            '#type' => 'submit',
            '#value' => t('Delete'),
            '#name' => 'ief-' . $parents_delta[$parents_key] . '-delete-confirm-' . $key,
            '#limit_validation_errors' => array(),
            '#submit' => array(),
            '#ajax' => array(
              'callback' => 'inline_entity_form_widget_refresh',
              'wrapper' => $wrapper,
            ),
          );
          $form['actions']['ief_delete_cancel'] = array(
            '#type' => 'submit',
            '#value' => t('Cancel'),
            '#name' => 'ief-' . $parents_delta[$parents_key] . '-delete-cancel-' . $key,
            '#limit_validation_errors' => array(),
            '#submit' => array(),
            '#ajax' => array(
              'callback' => 'inline_entity_form_widget_refresh',
              'wrapper' => $wrapper,
            ),
          );
        }
      }
      else {
        // Otherwise add the entity data for the table row.
        $row = &$element['entities'][$key];
        $row['#table_row'] = $entity_table['#rows'][$key];

        // Add an actions container with edit and delete buttons for the entity.
        $row['actions'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('inline-entity-form-entity-operations')),
        );
        $row['actions']['ief_entity_edit'] = array(
          '#type' => 'submit',
          '#value' => t('Edit'),
          '#name' => 'ief-' . $parents_delta[$parents_key] . '-entity-edit-' . $key,
          '#limit_validation_errors' => array(),
          '#submit' => array(),
          '#ajax' => array(
            'callback' => 'inline_entity_form_widget_refresh',
            'wrapper' => $wrapper,
          ),
        );
        $row['actions']['ief_entity_delete'] = array(
          '#type' => 'submit',
          '#value' => t('Delete'),
          '#name' => 'ief-' . $parents_delta[$parents_key] . '-entity-delete-' . $key,
          '#limit_validation_errors' => array(),
          '#submit' => array(),
          '#ajax' => array(
            'callback' => 'inline_entity_form_widget_refresh',
            'wrapper' => $wrapper,
          ),
        );
      }
    }

    $element['actions'] = array(
      '#attributes' => array('class' => array('container-inline')),
      '#type' => 'container',
      '#weight' => 100,
    );
    if (inline_entity_form_widget_form_action_allow_action($form_state['inline_entity_form'][$parents_key]['action'], 'ief_add')) {
      // Let the user select the bundle, if multiple are available.
      if (count($settings['bundles']) > 1) {
        $bundles = array();
        $info = entity_get_info($settings['entity_type']);
        foreach ($info['bundles'] as $bundle_name => $bundle_info) {
          if (in_array($bundle_name, $settings['bundles'])) {
            $bundles[$bundle_name] = $bundle_info['label'];
          }
        }

        $element['actions']['bundle'] = array(
          '#type' => 'select',
          '#options' => $bundles,
        );
      }
      else {
        $element['actions']['bundle'] = array(
          '#type' => 'value',
          '#value' => reset($settings['bundles']),
        );
      }

      $element['actions']['ief_add'] = array(
        '#type' => 'submit',
        '#value' => $type_info['labels']['add button'],
        '#name' => 'ief-' . $parents_delta[$parents_key] . '-add',
        '#limit_validation_errors' => array(),
        '#submit' => array(),
        '#ajax' => array(
          'callback' => 'inline_entity_form_widget_refresh',
          'wrapper' => $wrapper,
        ),
      );
    }

    // Provide the add form.
    if (!empty($form_state['inline_entity_form'][$parents_key]['add_form'])) {
      $form_settings = &$form_state['inline_entity_form'][$parents_key]['add_form'];

      // Create a new entity that will be passed to the form.
      $info = entity_get_info($settings['entity_type']);
      $bundle_key = $info['entity keys']['bundle'];
      $default_values = array();
      // If the bundle key exists, it must always be set on an entity.
      if (!empty($bundle_key)) {
        $default_values[$bundle_key] = $form_settings['bundle'];
      }
      $entity = entity_create($settings['entity_type'], $default_values);

      $element['add_form'] = array(
        '#type' => 'fieldset',
        '#title' => $type_info['labels']['add fieldset'],
        // Used by Field API, #element_validate and #element_submit to find
        // the relevant values in $form_state.
        '#parents' => array_merge($parents, array('add_form')),
        // Store the entity on the form, to be modified in #element_submit.
        '#entity' => $entity,
        '#entity_type' => $settings['entity_type'],
      );
      $element['add_form']['actions'] = array(
        '#type' => 'container',
        '#weight' => 100,
      );
      $element['add_form'] += $type_info['callbacks']['form']($element['add_form'], $form_state);
      $element['add_form']['actions']['ief_add_save'] = array(
        '#type' => 'submit',
        '#value' => $type_info['labels']['save button'],
        '#name' => 'ief-' . $parents_delta[$parents_key] . '-add-submit',
        '#limit_validation_errors' => array($element['add_form']['#parents']),
        '#submit' => array(),
        '#ajax' => array(
          'callback' => 'inline_entity_form_widget_refresh',
          'wrapper' => $wrapper,
        ),
      );
      // Make sure the Cancel button is not shown when there are no entities.
      if (!empty($form_state['inline_entity_form'][$parents_key]['entities'])) {
        $element['add_form']['actions']['ief_add_cancel'] = array(
          '#type' => 'submit',
          '#value' => t('Cancel'),
          '#name' => 'ief-' . $parents_delta[$parents_key] . '-add-cancel',
          '#limit_validation_errors' => array(),
          '#submit' => array(),
          '#ajax' => array(
            'callback' => 'inline_entity_form_widget_refresh',
            'wrapper' => $wrapper,
          ),
        );
      }
    }

    return $element;
  }
}

/**
 * Calls #element_submit callbacks defined by the entity form.
 *
 * Used as an #element_validate callback added by the plugin form.
 * Checks if the previous #element_validate callbacks had set any errors,
 * and if not, proceeds to invoke the #element_submit callbacks.
 * #element_submit callbacks modify the entity stored in $form['#entity'] and
 * after they have been executed the entity is considered ready for saving.
 *
 * @param $entity_form
 *  The form of the entity being managed inline.
 * @param $form_state
 *   The form state of the complete IEF widget.
 */
function inline_entity_form_process_submit(&$entity_form, &$form_state) {
  // Abort submission if the form has been rebuilt by an unknown element, such
  // as a field widget.
  $triggering_element_name = end($form_state['triggering_element']['#array_parents']);
  if (!in_array($triggering_element_name, array('ief_add_save', 'ief_edit_save'))) {
    return;
  }

  if (!form_get_errors()) {
    foreach ($entity_form['#element_submit'] as $function) {
      $function($entity_form, $form_state);
    }
  }
}

/**
 * Cleans up the form state for each field.
 *
 * After field_attach_submit() has run and the entity has been saved, the form
 * state still contains field data in $form_state['field']. Unless that
 * data is removed, the next form with the same #parents (reopened add form,
 * for example) will contain data (i.e. uploaded files) from the previous form.
 *
 * @param $entity_form
 *   The form of the entity being managed inline.
 * @param $form_state
 *   The form state of the complete IEF widget.
 */
function inline_entity_form_cleanup_field_form_state($entity_form, &$form_state) {
  list(, , $bundle) = entity_extract_ids($entity_form['#entity_type'], $entity_form['#entity']);
  $instances = field_info_instances($entity_form['#entity_type'], $bundle);
  foreach ($instances as $instance) {
    $field_name = $instance['field_name'];
    $parents = $entity_form[$field_name]['#parents'];
    array_pop($parents);
    $langcode = $entity_form[$field_name]['#language'];

    $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
    unset($field_state['items']);
    $field_state['items_count'] = 0;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
  }
}

/**
 * Validate callback: validates the element array of an inline entity form.
 */
function inline_entity_form_element_validate($element, &$form_state, $form) {
  // Extract the name of the triggering element from the form state array.
  $triggering_element_name = end($form_state['triggering_element']['#array_parents']);

  // Abort validation if the form has been rebuilt by an unknown element, such
  // as a field widget inside the embedded form.
  if (!in_array($triggering_element_name, array_keys(inline_entity_form_widget_form_actions()))) {
    return;
  }

  // Build a parents array for this element's values in the form.
  $parents = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));
  $parents_key = strtr(implode('-', $parents), '_', '-');
  $settings = $form_state['inline_entity_form'][$parents_key]['settings'];

  // Loop over the submitted delta values and update the weight of the entities
  // in the form state.
  foreach (element_children($element['entities']) as $key) {
    $form_state['inline_entity_form'][$parents_key]['entities'][$key]['weight'] = $element['entities'][$key]['delta']['#value'];
  }

  $form_state['inline_entity_form'][$parents_key]['action'] = $triggering_element_name;
  $form_state['rebuild'] = TRUE;

  // Get the current form values.
  $form_values = drupal_array_get_nested_value($form_state['values'], $parents);

  // Extract the triggering element's delta value from the array if available.
  // This value is only available for clicked buttons from the "Operations"
  // column (edit, delete), and contains the delta of the entry in
  // $form_state['inline_entity_form'][$parents_key]['entities'].
  $triggering_element_delta = inline_entity_form_widget_form_action_delta_value($triggering_element_name, $form_state['triggering_element']['#array_parents']);

  switch ($triggering_element_name) {
    case 'ief_add':
      $form_state['inline_entity_form'][$parents_key]['add_form'] = array(
        'bundle' => $form_values['actions']['bundle'],
      );
      break;

    case 'ief_add_save':
      // Determine the correct weight of the new element.
      $weight = 0;
      if (!empty($form_state['inline_entity_form'][$parents_key]['entities'])) {
        $weight = max(array_keys($form_state['inline_entity_form'][$parents_key]['entities'])) + 1;
      }
      // The #element_submit callbacks of the entity form have by now
      // prepared the entity stored in $entity_form['#entity'] for saving.
      // Add it to form state, mark it for saving, and close the form.
      $entity_form = $element['add_form'];
      $form_state['inline_entity_form'][$parents_key]['entities'][] = array(
        'data' => $entity_form['#entity'],
        'weight' => $weight,
        'form' => NULL,
        'needs_save' => TRUE,
      );

      $form_state['inline_entity_form'][$parents_key]['add_form'] = NULL;
      break;

    case 'ief_add_cancel':
      $form_state['inline_entity_form'][$parents_key]['add_form'] = NULL;
      break;

    case 'ief_entity_edit':
      $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['form'] = 'edit';
      break;

    case 'ief_edit_save':
      // The #element_submit callbacks of the entity form have by now
      // prepared the entity stored in $entity_form['#entity'] for saving.
      // Replace the entity in form state with that one one, mark it
      // for saving, and close the form.
      $entity_form = $element['entities'][$triggering_element_delta]['form'];
      $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['data'] = $entity_form['#entity'];
      $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['needs_save'] = TRUE;
      $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['form'] = NULL;
      break;

    case 'ief_edit_cancel':
      $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['form'] = NULL;
      break;

    case 'ief_entity_delete':
      $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['form'] = 'delete';
      break;

    case 'ief_delete_confirm':
      $entity_id = entity_id($settings['entity_type'], $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['data']);
      if (!empty($entity_id)) {
        $form_state['inline_entity_form'][$parents_key]['delete'][] = $entity_id;
      }

      unset($form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]);
      break;

    case 'ief_delete_cancel':
      $form_state['inline_entity_form'][$parents_key]['entities'][$triggering_element_delta]['form'] = NULL;
      break;
  }
}

/**
 * Implements hook_field_attach_submit().
 */
function inline_entity_form_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  $bundle_name = field_extract_bundle($entity_type, $entity);

  foreach (field_info_instances($entity_type, $bundle_name) as $instance_name => $instance) {
    if (isset($instance['widget']) && $instance['widget']['type'] == 'inline_entity_form') {
      $field_name = $instance['field_name'];
      $field = field_info_field($field_name);
      $langcode = entity_metadata_field_get_language($entity_type, $entity, $field);
      $parents = array_merge($form['#parents'], array($field_name, $langcode));
      $parents_key = strtr(implode('-', $parents), '_', '-');
      $values = $form_state['inline_entity_form'][$parents_key];
      $settings = $values['settings'];
      // Delete any entities staged for deletion.
      if (!empty($values['delete'])) {
        entity_delete_multiple($settings['entity_type'], array_values($values['delete']));
      }

      // Respect the entity weights.
      uasort($values['entities'], 'drupal_sort_weight');
      // Go through the ief data and assemble a list of ids.
      $entity_ids = array();
      foreach ($values['entities'] as $item) {
        if ($item['needs_save']) {
          entity_save($settings['entity_type'], $item['data']);
        }
        $entity_ids[] = array($settings['column'] => entity_id($settings['entity_type'], $item['data']));
      }
      // Set the list of ids as the field value.
      $entity->{$field_name}[$langcode] = $entity_ids;
    }
  }
}

/**
 * Refreshes the inline form widget when one of its submit buttons is clicked.
 */
function inline_entity_form_widget_refresh($form, $form_state) {
  // Extract the array parents from the triggering element to determine if one
  // of our submit buttons was clicked and at what depth in the widget's element
  // array it is.
  $array_parents = $form_state['triggering_element']['#array_parents'];
  $action = array_pop($array_parents);

  if ($array_depth = inline_entity_form_widget_form_action_array_depth($action)) {
    // Pop off the necessary number of parents so the array parents array only
    // contains the parents leading to the actual reference field.
    for ($i = 0; $i < $array_depth - 1; $i++) {
      array_pop($array_parents);
    }

    // Traverse the form array to find and return just the reference field's
    // element array.
    foreach ($array_parents as $key) {
      $form = $form[$key];
    }

    return $form[$form['#language']];
  }
}

/**
 * Themes the table showing existing entity references in the widget.
 *
 * @param $variables
 *   Contains the form element data from $element['entities'].
 */
function theme_inline_entity_form_entity_table($variables) {
  $form = $variables['form'];

  $header = array(
    array('data' => '', 'class' => array('ief-tabledrag-header')),
    array('data' => t('Sort order'), 'class' => array('ief-sort-order-header')),
  );
  // Add headers provided by the IEF table callback.
  $header = array_merge($header, $form['#table_header']);
  $header[] = t('Operations');

  // Build an array of entity rows for the table.
  $rows = array();

  foreach (element_children($form) as $key) {
    // If the current entity array specifies a form, output that in a multi-
    // column cell in the table.
    if (!empty($form[$key]['form'])) {
      $row = array(
        array('data' => '', 'class' => array('ief-tabledrag-handle')),
        drupal_render($form[$key]['delta']),
        array('data' => drupal_render($form[$key]['form']), 'colspan' => 3),
      );
    }
    else {
      // Otherwise output all the entity data in the table.
      $row = array(
        array('data' => '', 'class' => array('ief-tabledrag-handle')),
        drupal_render($form[$key]['delta']),
      );
      // Add cells provided by the IEF table callback.
      $row = array_merge($row, $form[$key]['#table_row']);
      $row[] = drupal_render($form[$key]['actions']);
    }

    $rows[] = array('data' => $row, 'class' => array('draggable'));
  }

  if (!empty($rows)) {
    // Add the tabledrag JavaScript.
    drupal_add_tabledrag('inline-entity-form-entity-table', 'order', 'sibling', 'inline-entity-form-entity-delta');

    // Return the themed table.
    return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'inline-entity-form-entity-table')));
  }
}

/**
 * Implements hook_field_widget_error().
 */
function inline_entity_form_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Returns an array of widget form action info keyed by button name.
 */
function inline_entity_form_widget_form_actions() {
  return array(
    'ief_add' => array(
      'array_depth' => 3,
      'allowed_actions' => array(),
    ),
    'ief_add_save' => array(
      'array_depth' => 4,
      'allowed_actions' => array('ief_add'),
    ),
    'ief_add_cancel' => array(
      'array_depth' => 4,
      'allowed_actions' => array('ief_add'),
    ),
    'ief_entity_edit' => array(
      'array_depth' => 5,
      'delta_depth' => 2,
      'allowed_actions' => array('ief_add'),
    ),
    'ief_edit_save' => array(
      'array_depth' => 6,
      'delta_depth' => 3,
      'allowed_actions' => array('ief_add'),
    ),
    'ief_edit_cancel' => array(
      'array_depth' => 6,
      'delta_depth' => 3,
      'allowed_actions' => array('ief_add'),
    ),
    'ief_entity_delete' => array(
      'array_depth' => 5,
      'delta_depth' => 2,
      'allowed_actions' => array('ief_add'),
    ),
    'ief_delete_confirm' => array(
      'array_depth' => 6,
      'delta_depth' => 3,
      'allowed_actions' => array('ief_add'),
    ),
    'ief_delete_cancel' => array(
      'array_depth' => 6,
      'delta_depth' => 3,
      'allowed_actions' => array('ief_add'),
    ),
  );
}

/**
 * Returns the array depth of a given action.
 *
 * @param $action
 *   The name of the submit button element on the inline entity form widget.
 *
 * @return
 *   The array depth of the given button from the root widget form element.
 */
function inline_entity_form_widget_form_action_array_depth($action) {
  $actions = inline_entity_form_widget_form_actions();

  if (!empty($actions[$action])) {
    return $actions[$action]['array_depth'];
  }

  return FALSE;
}

/**
 * Returns the delta value for the entity a targeted action was performed on.
 *
 * @param $action
 *   The name of the targeted action performed on an entity.
 * @param $array_parents
 *   The #parents array of the submit button used to perform the action.
 *
 * @return
 *   The delta value in the widget's element array for the targeted entity or
 *   FALSE if it could not be found.
 */
function inline_entity_form_widget_form_action_delta_value($action, $array_parents) {
  $actions = inline_entity_form_widget_form_actions();

  if (!empty($actions[$action]['delta_depth'])) {
    $delta_depth = $actions[$action]['delta_depth'];
  }
  else {
    return FALSE;
  }

  for ($i = 0; $i < $delta_depth; $i++) {
    array_pop($array_parents);
  }

  return end($array_parents);
}

/**
 * Returns a boolean indicating whether a particular action is allowed when the
 * specified action has been used.
 *
 * @param $action
 *   The name of the submit button element on the inline entity form widget.
 * @param $target_action
 *   The name of the secondary action you want to check for access to when the
 *   action has been performed.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the action is allowed.
 */
function inline_entity_form_widget_form_action_allow_action($action, $target_action) {
  // Allow any target action if no action has been performed yet.
  if (empty($action)) {
    return TRUE;
  }

  // Extract the array of allowed follow-up actions from the current action.
  $actions = inline_entity_form_widget_form_actions();
  $allowed_actions = !empty($actions[$action]['allowed_actions']) ? $actions[$action]['allowed_actions'] : array();

  return in_array($target_action, $allowed_actions);
}

/**
 * Move form elements into fieldsets for presentation purposes.
 *
 * Inline forms use #tree = TRUE to keep their values in a hierarchy for
 * easier storage. Moving the form elements into fieldsets during form building
 * would break up that hierarchy, so it's not an option for Field API fields.
 * Therefore, we wait until the pre_render stage, where any changes we make
 * affect presentation only and aren't reflected in $form_state['values'].
 *
 * Copied from views (views_ui_pre_render_add_fieldset_markup()).
 */
function inline_entity_form_pre_render_add_fieldset_markup($form) {
  foreach (element_children($form) as $key) {
    $element = $form[$key];
    // In our form builder functions, we added an arbitrary #fieldset property
    // to any element that belongs in a fieldset. If this form element has that
    // property, move it into its fieldset.
    if (isset($element['#fieldset']) && isset($form[$element['#fieldset']])) {
      $form[$element['#fieldset']][$key] = $element;
      // Remove the original element this duplicates.
      unset($form[$key]);
    }
  }

  return $form;
}
